name: Release Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'holophonix_utils/__init__.py'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Extract version from __init__.py
      id: version
      run: |
        VERSION=$(grep -oP '(?<="version" : \()[^)]+' holophonix_utils/__init__.py | tr -d " ")
        VERSION=${VERSION//,/.}
        echo "Extracted version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Validate version format
      id: version_validation
      run: |
        if ! echo "$VERSION" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi
      env:
        VERSION: ${{ steps.version.outputs.version }}

    - name: Get previous version from latest tag
      id: previous_version
      run: |
        PREVIOUS_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Previous version: $PREVIOUS_VERSION"
        echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT

    - name: Check version and tags
      id: version_check
      run: |
        # Get all tags for this version
        EXISTING_TAGS=$(git tag -l "v$VERSION*")
        
        # Check if any release exists (beta or stable)
        if gh release view "v$VERSION-beta" >/dev/null 2>&1 || \
           gh release view "v$VERSION-stable" >/dev/null 2>&1 || \
           [ -n "$EXISTING_TAGS" ]; then
          echo "Release or tag already exists for version $VERSION"
          echo "release=false" >> $GITHUB_OUTPUT
        else
          echo "No existing release or tag found for version $VERSION"
          echo "release=true" >> $GITHUB_OUTPUT
        fi
      env:
        VERSION: ${{ steps.version.outputs.version }}

    - name: Determine release type
      id: release_type
      run: |
        FEATURE_NUM=$(echo "$VERSION" | cut -d. -f2)
        if [ $((FEATURE_NUM % 2)) -eq 1 ]; then
          echo "type=beta" >> $GITHUB_OUTPUT
        else
          echo "type=stable" >> $GITHUB_OUTPUT
        fi
      env:
        VERSION: ${{ steps.version.outputs.version }}

    - name: Create Git Tag
      if: steps.version_check.outputs.release == 'true'
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git tag v${{ steps.version.outputs.version }}-${{ steps.release_type.outputs.type }}
        git push origin v${{ steps.version.outputs.version }}-${{ steps.release_type.outputs.type }}

    - name: Zip the addon folder
      if: steps.version_check.outputs.release == 'true'
      run: |
        zip -r holophonix_utils_v${{ steps.version.outputs.version }}_${{ steps.release_type.outputs.type }}.zip holophonix_utils

    - name: Create Release
      if: steps.version_check.outputs.release == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}-${{ steps.release_type.outputs.type }}
        release_name: Release v${{ steps.version.outputs.version }} ${{ steps.release_type.outputs.type }}
        draft: false
        prerelease: ${{ steps.release_type.outputs.type == 'beta' }}

    - name: Upload Release Asset
      if: steps.version_check.outputs.release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: holophonix_utils_v${{ steps.version.outputs.version }}_${{ steps.release_type.outputs.type }}.zip
        asset_name: holophonix_utils_v${{ steps.version.outputs.version }}_${{ steps.release_type.outputs.type }}.zip
        asset_content_type: application/zip