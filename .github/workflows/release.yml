name: Release Workflow

on:
  push:
    branches:
      - master

permissions:
  contents: write  # Grant write permissions for the contents scope

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Check if version has changed
      id: version_check
      run: |
        if git diff HEAD^ HEAD -- __init__.py | grep -q 'version'; then
          echo "Version has changed, proceeding with release"
          echo "release=true" >> $GITHUB_OUTPUT
        else
          echo "Version has not changed, skipping release"
          echo "release=false" >> $GITHUB_OUTPUT
        fi

    - name: Extract version from __init__.py
      if: steps.version_check.outputs.release == 'true'
      id: version
      run: |
        VERSION=$(grep -oP '(?<="version" : \()[^)]+' __init__.py | tr -d " ")
        VERSION=${VERSION//,/.}  # Replace commas with dots
        echo "Extracted version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Git Tag
      if: steps.version_check.outputs.release == 'true'
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git tag v${{ steps.version.outputs.version }}
        git push origin v${{ steps.version.outputs.version }}

    - name: Zip the addon
      if: steps.version_check.outputs.release == 'true'
      run: |
        zip -r holophonix_utils.zip . -i holophonix_utils/*

    - name: Create Release
      if: steps.version_check.outputs.release == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: steps.version_check.outputs.release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: holophonix_utils.zip
        asset_name: holophonix_utils.zip
        asset_content_type: application/zip